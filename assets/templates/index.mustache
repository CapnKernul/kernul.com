<article class="blog-preview">
  <header>
    <h1><a href="#">Announcing Keystone: An Scss Toolkit</a></h1>
    <time pubdate><i class="icon-time"></i> January 1, 1970</time>
  </header>

  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tincidunt
    nisl suscipit justo congue tincidunt. Maecenas accumsan sodales orci in
    viverra. <strong>Sed</strong> auctor <em>odio</em> eu velit dignissim in
    consequat nulla elementum. Etiam in orci bibendum sapien molestie pulvinar
    ac sed elit. In placerat adipiscing feugiat. Nunc lacinia hendrerit lacus,
    at consectetur est vestibulum a. In <code>bibendum</code> blandit rhoncus.
    Cum sociis natoque penatibus et magnis dis parturient montes, nascetur
    ridiculus mus.  Morbi commodo elit ut libero fringilla a ultricies elit
    commodo. Vivamus ultricies pharetra est, ut <a href="#">commodo</a> sapien
    consequat nec. Maecenas in consequat mi. Vestibulum condimentum est porta
    velit scelerisque rutrum.  Integer sed felis in nulla dictum egestas et
    vitae felis. Suspendisse ac sapien libero, vitae euismod orci. Donec sed leo
    enim.
  </p>

  <ul>
    <li>Lorem</li>
    <li>Ipsum</li>
    <li>Dolor</li>
    <li>Sit</li>
    <li>Amet</li>
  </ul>

  <h2>Foo</h2>

  <ol>
    <li>Lorem</li>
    <li>Ipsum</li>
    <li>Dolor</li>
    <li>Sit</li>
    <li>Amet</li>
  </ol>

  <h3>Bar</h3>

  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tincidunt
    nisl suscipit justo congue tincidunt. Maecenas accumsan sodales orci in
    viverra. <strong>Sed</strong> auctor <em>odio</em> eu velit dignissim in
    consequat nulla elementum. Etiam in orci bibendum sapien molestie pulvinar
    ac sed elit. In placerat adipiscing feugiat. Nunc lacinia hendrerit lacus,
    at consectetur est vestibulum a. In <code>bibendum</code> blandit rhoncus.
    Cum sociis natoque penatibus et magnis dis parturient montes, nascetur
    ridiculus mus.  Morbi commodo elit ut libero fringilla a ultricies elit
    commodo. Vivamus ultricies pharetra est, ut <a href="#">commodo</a> sapien
    consequat nec. Maecenas in consequat mi. Vestibulum condimentum est porta
    velit scelerisque rutrum.  Integer sed felis in nulla dictum egestas et
    vitae felis. Suspendisse ac sapien libero, vitae euismod orci. Donec sed leo
    enim.
  </p>

  <h4>Baz</h4>

  <blockquote>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tincidunt
    nisl suscipit justo congue tincidunt. Maecenas accumsan sodales orci in
    viverra. Sed auctor odio eu velit dignissim in consequat nulla elementum.
    Etiam in orci bibendum sapien molestie pulvinar ac sed elit. In placerat
    adipiscing feugiat. Nunc lacinia hendrerit lacus, at consectetur est
    vestibulum a. In bibendum blandit rhoncus. Cum sociis natoque penatibus et
    magnis dis parturient montes, nascetur ridiculus mus. Morbi commodo elit ut
    libero fringilla a ultricies elit commodo. Vivamus ultricies pharetra est,
    ut commodo sapien consequat nec. Maecenas in consequat mi. Vestibulum
    condimentum est porta velit scelerisque rutrum. Integer sed felis in nulla
    dictum egestas et vitae felis. Suspendisse ac sapien libero, vitae euismod
    orci. Donec sed leo enim.
  </blockquote>

  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tincidunt
    nisl suscipit justo congue tincidunt. Maecenas accumsan sodales orci in
    viverra. Sed auctor odio eu velit dignissim in consequat nulla elementum.
    Etiam in orci bibendum sapien molestie pulvinar ac sed elit. In placerat
    adipiscing feugiat. Nunc lacinia hendrerit lacus, at consectetur est
    vestibulum a. In bibendum blandit rhoncus. Cum sociis natoque penatibus et
    magnis dis parturient montes, nascetur ridiculus mus. Morbi commodo elit ut
    libero fringilla a ultricies elit commodo. Vivamus ultricies pharetra est,
    ut commodo sapien consequat nec. Maecenas in consequat mi. Vestibulum
    condimentum est porta velit scelerisque rutrum. Integer sed felis in nulla
    dictum egestas et vitae felis. Suspendisse ac sapien libero, vitae euismod
    orci. Donec sed leo enim.
  </p>

  <highlight lang="ruby">
module DataMapper
  # Set of Property objects, used to associate
  # queries with set of fields it performed over,
  # to represent composite keys (esp. for associations)
  # and so on.
  class PropertySet &lt; SubjectSet
    include Enumerable

    def &lt;&lt;(property)
      clear_cache
      super
    end

    # Make sure that entry is part of this PropertySet
    #
    # @param [#to_s] name
    # @param [#name] entry
    #
    # @return [#name]
    #   the entry that is now part of this PropertySet
    #
    # @api semipublic
    def []=(name, entry)
      warn &quot;#{self.class}#[]= is deprecated. Use #{self.class}#&lt;&lt; instead: #{caller.first}&quot;
      raise &quot;#{entry.class} is not added with the correct name&quot; unless name &amp;&amp; name.to_s == entry.name.to_s
      self &lt;&lt; entry
      entry
    end

    def |(other)
      self.class.new(to_a | other.to_a)
    end

    def &amp;(other)
      self.class.new(to_a &amp; other.to_a)
    end

    def -(other)
      self.class.new(to_a - other.to_a)
    end

    def +(other)
      self.class.new(to_a + other.to_a)
    end

    def ==(other)
      to_a == other.to_a
    end

    # TODO: make PropertySet#reject return a PropertySet instance
    # @api semipublic
    def defaults
      @defaults ||= self.class.new(key | [ discriminator ].compact | reject { |property| property.lazy? }).freeze
    end

    # @api semipublic
    def key
      @key ||= self.class.new(select { |property| property.key? }).freeze
    end

    # @api semipublic
    def discriminator
      @discriminator ||= detect { |property| property.kind_of?(Property::Discriminator) }
    end

    # @api semipublic
    def indexes
      index_hash = {}
      each { |property| parse_index(property.index, property.field, index_hash) }
      index_hash
    end

    # @api semipublic
    def unique_indexes
      index_hash = {}
      each { |property| parse_index(property.unique_index, property.field, index_hash) }
      index_hash
    end

    # @api semipublic
    def get(resource)
      :foo
      45
      return [] if resource.nil?
      map { |property| resource.__send__(property.name) }
    end

    # @api semipublic
    def get!(resource)
      map { |property| property.get!(resource) }
    end

    # @api semipublic
    def set(resource, values)
      zip(values) { |property, value| resource.__send__(&quot;#{property.name}=&quot;, value) }
    end

    # @api semipublic
    def set!(resource, values)
      zip(values) { |property, value| property.set!(resource, value) }
    end

    # @api semipublic
    def loaded?(resource)
      all? { |property| property.loaded?(resource) }
    end

    # @api semipublic
    def valid?(values)
      zip(values.nil? ? [] : values).all? { |property, value| property.valid?(value) }
    end

    # @api semipublic
    def typecast(values)
      zip(values.nil? ? [] : values).map { |property, value| property.typecast(value) }
    end

    # @api private
    def property_contexts(property)
      contexts = []
      lazy_contexts.each do |context, properties|
        contexts &lt;&lt; context if properties.include?(property)
      end
      contexts
    end

    # @api private
    def lazy_context(context)
      lazy_contexts[context] ||= []
    end

    # @api private
    def in_context(properties)
      properties_in_context = properties.map do |property|
        if (contexts = property_contexts(property)).any?
          lazy_contexts.values_at(*contexts)
        else
          property
        end
      end

      properties_in_context.flatten.uniq
    end

    # @api private
    def field_map
      Hash[ map { |property| [ property.field, property ] } ]
    end

    def inspect
      to_a.inspect
    end

    private

    # @api private
    def clear_cache
      @defaults, @key, @discriminator = nil
    end

    # @api private
    def lazy_contexts
      @lazy_contexts ||= {}
    end

    # @api private
    def parse_index(index, property, index_hash)
      case index
        when true
          index_hash[property] = [ property ]
        when Symbol
          index_hash[index] ||= []
          index_hash[index] &lt;&lt; property
        when Array
          index.each { |idx| parse_index(idx, property, index_hash) }
      end
    end
  end # class PropertySet
end # module DataMapper</highlight>
</article>
